Version 2 statements...

SELECT id, category_id, current_version, created_at, updated_at
FROM public.questions;

SELECT * 
FROM question_iterations
WHERE version = 1
AND (economic_effect > 0 OR government_effect > 0);

SELECT *
FROM question_iterations
WHERE version = 1;

DELETE 
FROM question_iterations
WHERE version = 2;

#https://stackoverflow.com/questions/13016851/postgresql-sub-select-inside-insert

#INSERT INTO widgets (map_id, widget_name)
#SELECT mt.map_id, 'Bupo'
#FROM map_tags mt
#WHERE mt.map_license = '12345'

#create version 2 questions from those only concerned with econ or govt. attempting to limit questions.
INSERT INTO question_iterations (question_id, version, content, economic_effect, diplomatic_effect, government_effect, societal_effect, created_at, updated_at)
(
	SELECT question_id, 2 as version, content, economic_effect, 0 as diplomatic_effect, government_effect, 0 as societal_effect, NOW()::timestamp as created_at, NOW()::timestamp as updated_at
	FROM question_iterations
	WHERE version = 1
	AND (economic_effect > 0 OR government_effect > 0)
);

SELECT *
FROM question_iterations
WHERE version = 2;

FROM question_iterations
WHERE version = 2;

--------------------------------------------------
congressional_districts

INSERT INTO congressional_districts (geoid, name, latitude, longitude, created_at, updated_at)
(
	SELECT geoid, namelsad as name, CAST(intptlat AS numeric) as latitude, CAST(intptlon AS numeric) as longitude, NOW()::timestamp as created_at, NOW()::timestamp as updated_at
	from voting_district_2018_raw
	order by geoid
);


SELECT id, geom, statefp, cd116fp, geoid, namelsad, lsad, cdsessn, mtfcc, funcstat, aland, awater, intptlat, intptlon
FROM public.voting_district_2018_raw;

SELECT geoid, namelsad as name, CAST(intptlat AS numeric) as latitude, CAST(intptlon AS numeric) as longitude, NOW()::timestamp as created_at, NOW()::timestamp as updated_at
from voting_district_2018_raw
order by geoid;

INSERT INTO congressional_districts (geoid, name, latitude, longitude, created_at, updated_at)
(
	SELECT geoid, namelsad as name, CAST(intptlat AS numeric) as latitude, CAST(intptlon AS numeric) as longitude, NOW()::timestamp as created_at, NOW()::timestamp as updated_at
	from voting_district_2018_raw
	order by geoid
);

select * from congressional_districts;

drop extension "postgis_topology";
drop extension "postgis";

create extension "postgis";


SELECT id, geom, statefp, countyfp, countyns, affgeoid, geoid, name, lsad, aland, awater, ST_X(ST_centroid(geom)), ST_Y(ST_centroid(geom))
FROM county_2018_raw
limit 20;


SELECT id, geom, statefp, countyfp, countyns, affgeoid, geoid, name, lsad, aland, awater, ST_X(ST_centroid(geom)), ST_Y(ST_centroid(geom))
FROM county_2018_raw
limit 20;

SELECT statefp, countyfp, geoid, affgeoid, name, ST_Y(ST_centroid(geom)) as latidude, ST_X(ST_centroid(geom)) as longitude
FROM county_2018_raw
limit 20;


SELECT cr.statefp, cr.countyfp, cr.geoid, cr.affgeoid, cr.name, ST_Y(ST_centroid(cr.geom)) as latidude, ST_X(ST_centroid(cr.geom)) as longitude, state.name
FROM county_2018_raw cr
LEFT JOIN state on state.affgeoid = cr.affgeoid
limit 20;

select * from state;

SELECT cr.geoid, cr.name, cr.statefp, cr.countyfp, state.stusps as state_abbrev, state.name as state_name, ST_Y(ST_centroid(cr.geom)) as latitude, ST_X(ST_centroid(cr.geom)) as longitude
FROM county_2018_raw cr
LEFT JOIN state on state.statefp = cr.statefp
order by cr.geoid
limit 20;

\copy (
	SELECT cr.id, cr.geoid, cr.name, cr.statefp, cr.countyfp, state.stusps as state_abbrev, state.name as state_name, ST_Y(ST_centroid(cr.geom)) as latitude, ST_X(ST_centroid(cr.geom)) as longitude, NOW()::timestamp as created_at, NOW()::timestamp as updated_at
	FROM county_2018_raw cr
	INNER JOIN state on state.statefp = cr.statefp
	order by cr.id
) TO '/tmp/counties.csv' CSV HEADER;

\copy ( SELECT cr.id, cr.geoid, cr.name, cr.statefp, cr.countyfp, state.stusps as state_abbrev, state.name as state_name, ST_Y(ST_centroid(cr.geom)) as latitude, ST_X(ST_centroid(cr.geom)) as longitude, NOW()::timestamp as created_at, NOW()::timestamp as updated_at FROM county_2018_raw cr INNER JOIN state on state.statefp = cr.statefp order by cr.id ) TO '/tmp/counties.csv' CSV HEADER;

\copy counties FROM '/tmp/counties.csv' DELIMITER ',' CSV HEADER;

FEATURE_ID|FEATURE_NAME|FEATURE_CLASS|STATE_ALPHA|STATE_NUMERIC|COUNTY_NAME|COUNTY_NUMERIC|PRIMARY_LAT_DMS|PRIM_LONG_DMS|PRIM_LAT_DEC|PRIM_LONG_DEC|SOURCE_LAT_DMS|SOURCE_LONG_DMS|SOURCE_LAT_DEC|SOURCE_LONG_DEC|ELEV_IN_M|ELEV_IN_FT|MAP_NAME|DATE_CREATED|DATE_EDITED

FEATURE_ID|FEATURE_NAME|FEATURE_CLASS|STATE_ALPHA|STATE_NUMERIC|COUNTY_NAME|COUNTY_NUMERIC|PRIMARY_LAT_DMS|PRIM_LONG_DMS|PRIM_LAT_DEC|PRIM_LONG_DEC|SOURCE_LAT_DMS|SOURCE_LONG_DMS|SOURCE_LAT_DEC|SOURCE_LONG_DEC|ELEV_IN_M|ELEV_IN_FT|MAP_NAME|DATE_CREATED|DATE_EDITED

https://www.usgs.gov/core-science-systems/ngp/board-on-geographic-names/download-gnis-data
\copy national FROM '/tmp/national.txt' WITH  FORMAT CSV, DELIMITER '|', HEADER TRUE;

CREATE TABLE national_raw (feature_id integer,feature_name varchar,feature_class varchar,state_alpha varchar,state_numeric varchar,county_name varchar,county_numeric varchar,primary_lat_dms varchar,prim_long_dms varchar,prim_lat_dec varchar,prim_long_dec varchar,source_lat_dms varchar,source_long_dms varchar,source_lat_dec varchar,source_long_dec varchar,elev_in_m varchar,elev_in_ft varchar,map_name varchar,date_created varchar,date_edited varchar);
copy national_raw FROM '/tmp/national.txt' DELIMITER '|' CSV;


\copy ( SELECT cr.id, cr.geoid, cr.name, cr.statefp, cr.countyfp, state.stusps as state_abbrev, state.name as state_name, ST_Y(ST_centroid(cr.geom)) as latitude, ST_X(ST_centroid(cr.geom)) as longitude, NOW()::timestamp as created_at, NOW()::timestamp as updated_at FROM county_2018_raw cr INNER JOIN state on state.statefp = cr.statefp order by cr.id ) TO '/tmp/counties.csv' CSV HEADER;

copy ( select feature_id, feature_name as name, state_alpha as state_abbrev, state_numeric, county_name, county_numeric, prim_lat_dec as latitude, prim_long_dec as longitude from national_raw where feature_class = 'Populated Place' order by feature_id ) TO '/tmp/cities.csv' CSV HEADER;

----------------------------------
cities

drop table national;
CREATE TABLE national_raw (feature_id integer,feature_name varchar,feature_class varchar,state_alpha varchar,state_numeric varchar,county_name varchar,county_numeric varchar,primary_lat_dms varchar,prim_long_dms varchar,prim_lat_dec varchar,prim_long_dec varchar,source_lat_dms varchar,source_long_dms varchar,source_lat_dec varchar,source_long_dec varchar,elev_in_m varchar,elev_in_ft varchar,map_name varchar,date_created varchar,date_edited varchar);
select * from national_raw;

copy national_raw FROM '/tmp/national.txt' DELIMITER '|' CSV HEADER;

select * from national_raw
limit 20;

select distinct feature_class from national_raw order by feature_class;

select * from national_raw where feature_name = 'Denver';

select * from national_raw 
where feature_class = 'Populated Place';

select feature_id, feature_name as name, state_alpha as state_abbrev, state_numeric, county_name, county_numeric, prim_lat_dec as latitude, prim_long_dec as longitude 
from national_raw 
where feature_class = 'Populated Place'
order by feature_id
limit 10;

select feature_id, feature_name as name, state_alpha as state_abbrev, state_numeric, county_name, county_numeric, prim_lat_dec as latitude, prim_long_dec as longitude 
from national_raw 
where feature_class = 'Populated Place'
order by feature_id;

copy ( select feature_id, feature_name as name, state_alpha as state_abbrev, state_numeric, county_name, county_numeric, prim_lat_dec as latitude, prim_long_dec as longitude from national_raw where feature_class = 'Populated Place' order by feature_id ) TO '/tmp/cities.csv' CSV HEADER;

select c.name, c.state_abbrev, state.name as state_name, c.county_name, cast(c.latitude as float) as latitude, cast(c.longitude as float) as longitude
from cities_points c
LEFT JOIN state on state.stusps = c.state_abbrev;
limit 20;

select * from state;

copy ( select c.id, c.name, c.state_abbrev, state.name as state_name, c.county_name, cast(c.latitude as float) as latitude, cast(c.longitude as float) as longitude, NOW()::timestamp as created_at, NOW()::timestamp as updated_at from cities_points c left join state on state.stusps = c.state_abbrev ) TO '/tmp/cities2.csv' CSV HEADER;

